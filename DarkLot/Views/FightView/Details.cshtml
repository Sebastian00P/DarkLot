@model DarkLot.ViewModeles.BattlesViewModel.BattleViewModel

@{
    ViewData["Title"] = $"Log walki #{Model.Id}";
    var fightersById = Model.Fighters.ToDictionary(
        f => f.FighterId.ToString(),
        f => new { f.Name, f.Profession, f.Team }
    );
}

<head>
    <link rel="stylesheet" href="~/css/FightsView/Details.css" asp-append-version="true" />
    <script src="~/js/Battle/fightLogsParser.js" asp-append-version="true"></script>
</head>

@* <h2>@ViewData["Title"]</h2>
 *@
<div class="container battle-details">
    <section class="fight-log">
        <input type="hidden" id="logs-data"
               value="@Html.Raw(string.Join("|||", Model.Logs.Select(l => l.RawLine)).Replace("\"","&quot;"))" />
        <div id="log-container"></div>
    </section>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
          const raw          = document.getElementById('logs-data').value;
          const logs         = raw ? raw.split('|||') : [];
          const fightersById = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(fightersById));
          const battleStart  = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.BattleStart));
          const honorText    = "Walka bez Punktów Honoru - gracze są z tego samego klanu.";

          document.getElementById('log-container').innerHTML =
            window.parseBattleLogs(logs, fightersById, battleStart, honorText);
        });
    </script>
}
